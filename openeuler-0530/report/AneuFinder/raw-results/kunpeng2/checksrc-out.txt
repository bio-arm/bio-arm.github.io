##############################################################################
##############################################################################
###
### Running command:
###
###   /home/biocbuild/R/R-4.3.0/bin/R CMD check --install=check:AneuFinder.install-out.txt --library=/home/biocbuild/R/R-4.3.0/site-library --timings AneuFinder_1.29.0.tar.gz
###
##############################################################################
##############################################################################


* using log directory ‘/home/biocbuild/bbs-3.18-bioc/meat/AneuFinder.Rcheck’
* using R version 4.3.0 (2023-04-21)
* using platform: aarch64-unknown-linux-gnu (64-bit)
* R was compiled by
    gcc (GCC) 10.3.1
    GNU Fortran (GCC) 10.3.1
* running under: openEuler 22.03 (LTS-SP1)
* using session charset: UTF-8
* checking for file ‘AneuFinder/DESCRIPTION’ ... OK
* checking extension type ... Package
* this is package ‘AneuFinder’ version ‘1.29.0’
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘AneuFinder’ can be installed ... OK
* used C++ compiler: ‘g++ (GCC) 10.3.1’
* checking installed package size ... OK
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking startup messages can be suppressed ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... NOTE
Aneufinder: multiple local function definitions for ‘parallel.helper’
  with different formal arguments
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking line endings in C/C++/Fortran sources/headers ... OK
* checking compiled code ... NOTE
Note: information on .o files is not available
* checking files in ‘vignettes’ ... OK
* checking examples ... ERROR
Running examples in ‘AneuFinder-Ex.R’ failed
The error most likely occurred in:

> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: binReads
> ### Title: Convert aligned reads from various file formats into read counts
> ###   in equidistant bins
> ### Aliases: binReads
> 
> ### ** Examples
> 
> ## Get an example BED file with single-cell-sequencing reads
> bedfile <- system.file("extdata", "KK150311_VI_07.bam.bed.gz", package="AneuFinderData")
> ## Bin the BED file into bin size 1Mb
> binned <- binReads(bedfile, assembly='mm10', binsize=1e6,
+                   chromosomes=c(1:19,'X','Y'))
Reading file KK150311_VI_07.bam.bed.gz ... 1.16s
Fetching chromosome lengths from UCSC ... 0s
Subsetting chromosomes ... 0.04s
Filtering reads ... 0.11s
Subsetting specified chromosomes ... 0.03s
Calculating complexity ... 0.3s
Removing duplicate reads ... 1.09s
Calculating coverage ...
* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ...
  Running ‘testthat.R’
 OK
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking running R code from vignettes ...
  ‘AneuFinder.Rnw’... OK
 NONE
* checking re-building of vignette outputs ... ERROR
Error(s) in re-building vignettes:
--- re-building ‘AneuFinder.Rnw’ using knitr
Aneufinder             package:AneuFinder              R Documentation

_W_r_a_p_p_e_r _f_u_n_c_t_i_o_n _f_o_r _t_h_e '_A_n_e_u_F_i_n_d_e_r' _p_a_c_k_a_g_e

_D_e_s_c_r_i_p_t_i_o_n:

     This function is an easy-to-use wrapper to bin the data, find
     copy-number-variations, locate breakpoints, plot genomewide
     heatmaps, distributions, profiles and karyograms.

_U_s_a_g_e:

     Aneufinder(inputfolder, outputfolder, configfile = NULL, numCPU = 1,
       reuse.existing.files = TRUE, binsizes = 1e+06, stepsizes = binsizes,
       variable.width.reference = NULL, reads.per.bin = NULL,
       pairedEndReads = FALSE, assembly = NULL, chromosomes = NULL,
       remove.duplicate.reads = TRUE, min.mapq = 10, blacklist = NULL,
       use.bamsignals = FALSE, reads.store = FALSE, correction.method = NULL,
       GC.BSgenome = NULL, method = c("edivisive"), strandseq = FALSE,
       R = 10, sig.lvl = 0.1, eps = 0.01, max.time = 60, max.iter = 5000,
       num.trials = 15, states = c("zero-inflation", paste0(0:10, "-somy")),
       confint = NULL, refine.breakpoints = FALSE, hotspot.bandwidth = NULL,
       hotspot.pval = 0.05, cluster.plots = TRUE)
     
_A_r_g_u_m_e_n_t_s:

inputfolder: Folder with either BAM or BED files.

outputfolder: Folder to output the results. If it does not exist it
          will be created.

configfile: A file specifying the parameters of this function (without
          'inputfolder', 'outputfolder' and 'configfile'). Having the
          parameters in a file can be handy if many samples with the
          same parameter settings are to be run. If a 'configfile' is
          specified, it will take priority over the command line
          parameters.

  numCPU: The numbers of CPUs that are used. Should not be more than
          available on your machine.

reuse.existing.files: A logical indicating whether or not existing
          files in 'outputfolder' should be reused.

binsizes: An integer vector with bin sizes. If more than one value is
          given, output files will be produced for each bin size.

stepsizes: A vector of step sizes the same length as 'binsizes'. Only
          used for 'method="HMM"'.

variable.width.reference: A BAM file that is used as reference to
          produce variable width bins. See 'variableWidthBins' for
          details.

reads.per.bin: Approximate number of desired reads per bin. The bin
          size will be selected accordingly. Output files are produced
          for each value.

pairedEndReads: Set to 'TRUE' if you have paired-end reads in your BAM
          files (not implemented for BED files).

assembly: Please see 'getChromInfoFromUCSC' for available assemblies.
          Only necessary when importing BED files. BAM files are
          handled automatically. Alternatively a data.frame with
          columns 'chromosome' and 'length'.

chromosomes: If only a subset of the chromosomes should be imported,
          specify them here.

remove.duplicate.reads: A logical indicating whether or not duplicate
          reads should be removed.

min.mapq: Minimum mapping quality when importing from BAM files. Set
          'min.mapq=NA' to keep all reads.

blacklist: A 'GRanges-class' or a bed(.gz) file with blacklisted
          regions. Reads falling into those regions will be discarded.

use.bamsignals: If 'TRUE' the 'bamsignals' package will be used for
          binning. This gives a tremendous performance increase for the
          binning step. 'reads.store' and 'calc.complexity' will be set
          to 'FALSE' in this case.

reads.store: Set 'reads.store=TRUE' to store read fragments as RData in
          folder 'data' and as BED files in 'BROWSERFILES/data'. This
          option will force 'use.bamsignals=FALSE'.

correction.method: Correction methods to be used for the binned read
          counts. Currently only ''GC''.

GC.BSgenome: A 'BSgenome' object which contains the DNA sequence that
          is used for the GC correction.

  method: Any combination of 'c('HMM','dnacopy','edivisive')'. Option
          'method='HMM'' uses a Hidden Markov Model as described in
          doi:10.1186/s13059-016-0971-7 to call copy numbers. Option
          ''dnacopy'' uses 'segment' from the 'DNAcopy' package to call
          copy numbers similarly to the method proposed in
          doi:10.1038/nmeth.3578, which gives more robust but less
          sensitive results compared to the HMM. Option ''edivisive''
          (DEFAULT) works like option ''dnacopy'' but uses the
          'e.divisive' function from the 'ecp' package for
          segmentation.

strandseq: A logical indicating whether the data comes from Strand-seq
          experiments. If 'TRUE', both strands carry information and
          are treated separately.

       R: method-edivisive: The maximum number of random permutations
          to use in each iteration of the permutation test (see
          'e.divisive'). Increase this value to increase accuracy on
          the cost of speed.

 sig.lvl: method-edivisive: The level at which to sequentially test if
          a proposed change point is statistically significant (see
          'e.divisive'). Increase this value to find more breakpoints.

     eps: method-HMM: Convergence threshold for the Baum-Welch
          algorithm.

max.time: method-HMM: The maximum running time in seconds for the
          Baum-Welch algorithm. If this time is reached, the Baum-Welch
          will terminate after the current iteration finishes. Set
          'max.time = -1' for no limit.

max.iter: method-HMM: The maximum number of iterations for the
          Baum-Welch algorithm. Set 'max.iter = -1' for no limit.

num.trials: method-HMM: The number of trials to find a fit where state
          'most.frequent.state' is most frequent. Each time, the HMM is
          seeded with different random initial values.

  states: method-HMM: A subset or all of
          'c("zero-inflation","0-somy","1-somy","2-somy","3-somy","4-somy",...)'.
          This vector defines the states that are used in the Hidden
          Markov Model. The order of the entries must not be changed.

 confint: Desired confidence interval for breakpoints. Set
          'confint=NULL' to disable confidence interval estimation.
          Confidence interval estimation will force 'reads.store=TRUE'.

refine.breakpoints: A logical indicating whether breakpoints from the
          HMM should be refined with read-level information.
          'refine.breakpoints=TRUE' will force 'reads.store=TRUE'.

hotspot.bandwidth: A vector the same length as 'binsizes' with
          bandwidths for breakpoint hotspot detection (see 'hotspotter'
          for further details). If 'NULL', the bandwidth will be chosen
          automatically as the average distance between reads.

hotspot.pval: P-value for breakpoint hotspot detection (see
          'hotspotter' for further details). Set 'hotspot.pval = NULL'
          to skip hotspot detection.

cluster.plots: A logical indicating whether plots should be clustered
          by similarity.

_V_a_l_u_e:

     'NULL'

_A_u_t_h_o_r(_s):

     Aaron Taudt

_E_x_a_m_p_l_e_s:

     ## Not run:
     
     ## The following call produces plots and genome browser files for all BAM files in "my-data-folder"
     Aneufinder(inputfolder="my-data-folder", outputfolder="my-output-folder")
     ## End(Not run)
     


* checking PDF version of manual ... OK
* DONE

Status: 2 ERRORs, 2 NOTEs
See
  ‘/home/biocbuild/bbs-3.18-bioc/meat/AneuFinder.Rcheck/00check.log’
for details.

